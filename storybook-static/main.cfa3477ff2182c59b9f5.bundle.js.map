{"version":3,"file":"main.cfa3477ff2182c59b9f5.bundle.js","sources":["webpack:///./src/OpencageAutocomplete.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\n// import * as Opencage from 'opencage-api-client';\nimport Opencage from 'opencage-api-client/dist/opencage-api.min';\nimport PropTypes from 'prop-types';\n\nimport './opencage.css';\n\nclass OpencageAutocomplete extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      suggestions: [],\n      isLoading: false,\n    };\n    const {\n      getSuggestionValue,\n      onSuggestionSelected,\n      renderSuggestion,\n    } = this.props;\n    this.onChange = this.onChange.bind(this);\n    this.fetchSuggestions = this.fetchSuggestions.bind(this);\n    this.onSuggestionsFetchRequested = this.onSuggestionsFetchRequested.bind(\n      this\n    );\n    this.onSuggestionsClearRequested = this.onSuggestionsClearRequested.bind(\n      this\n    );\n    if (getSuggestionValue) {\n      this.getSuggestionValue = getSuggestionValue;\n    } else {\n      this.getSuggestionValue = this.getSuggestionValue.bind(this);\n    }\n    if (onSuggestionSelected) {\n      this.onSuggestionSelected = onSuggestionSelected;\n    } else {\n      this.onSuggestionSelected = this.onSuggestionSelected.bind(this);\n    }\n    if (renderSuggestion) {\n      this.renderSuggestion = renderSuggestion;\n    } else {\n      this.renderSuggestion = this.renderSuggestion.bind(this);\n    }\n  }\n\n  onChange(event, { newValue }) {\n    this.setState({\n      value: newValue,\n    });\n  }\n\n  fetchSuggestions(value) {\n    Opencage.geocode({\n      q: value,\n      key: this.props.apiKey,\n      proxyURL: this.props.proxyURL,\n    })\n      .then(data => {\n        // console.log(JSON.stringify(data));\n        if (data.status.code === 200) {\n          if (data.results.length > 0) {\n            this.setState({ suggestions: data.results });\n          }\n        } else {\n          this.setState({ suggestions: [] });\n          // eslint-disable-next-line\n          console.log('[OCA] error', data.status.message);\n        }\n      })\n      .catch(error => {\n        this.setState({ suggestions: [] });\n        // eslint-disable-next-line\n        console.log('[OCA] error', error.message);\n      });\n  }\n\n  onSuggestionsFetchRequested({ value }) {\n    this.fetchSuggestions(value);\n  }\n\n  onSuggestionsClearRequested() {\n    this.setState({\n      suggestions: [],\n    });\n  }\n\n  // eslint-disable-next-line\n  getSuggestionValue(suggestion) {\n    return suggestion.formatted;\n  }\n\n  onSuggestionSelected(event, { suggestion }) {\n    if (this.props.debug) {\n      // eslint-disable-next-line\n      console.log('Suggestion Selected is', suggestion);\n    }\n  }\n\n  // eslint-disable-next-line\n  renderSuggestion(suggestion) {\n    return (\n      <div>\n        <span>{suggestion.annotations.flag}</span>\n        &nbsp;\n        <span>{suggestion.formatted}</span>\n      </div>\n    );\n  }\n\n  render() {\n    const { value, suggestions } = this.state;\n    const inputProps = {\n      placeholder: this.props.placeholder || 'address',\n      value,\n      onChange: this.onChange,\n    };\n    return (\n      <div className=\"opencage-wrapper\">\n        <Autosuggest\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          getSuggestionValue={this.getSuggestionValue}\n          renderSuggestion={this.renderSuggestion}\n          onSuggestionSelected={this.onSuggestionSelected}\n          inputProps={inputProps}\n        />\n      </div>\n    );\n  }\n}\nOpencageAutocomplete.propTypes = {\n  apiKey: PropTypes.string,\n  proxyURL: PropTypes.string,\n  placeholder: PropTypes.string,\n  debug: PropTypes.bool,\n  getSuggestionValue: PropTypes.func,\n  renderSuggestion: PropTypes.func,\n  onSuggestionSelected: PropTypes.func,\n};\n\nexport default OpencageAutocomplete;\n"],"mappings":"AAQA","sourceRoot":""}